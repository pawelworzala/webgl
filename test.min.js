function node(Q,value){
    if(node[Q]===undefined){
      node[Q]=value
      return false
    }
    return node[Q]
}

{

    
    /*R*/
    
    /*S*/
    
    node(0,async function T(U,V){
        const W=await fetch(U)
        const X=await W[V??"text"]()
        return X
    })
    
    node(1,function(Y){
      return new Float32Array(Y)
    })
    
    node(2,function(Y){
      return new Uint16Array(Y)
    })
    
    node(3,function(Z,a){
      return Object.assign(Z,a)
    })
    

}



{

    

    node(4,function(b){

      const c=node(5)
    const d=node(6)

    const e=b.canvas.width / b.canvas.height;

        const J={
            f: 5*9,
            e,
            g: 1/1000,
            h: 1000,

            I(){
              return c.i([], this.f, this.e, this.g, this.h)
            }
          }
        

        node(7)(J)

        return J


    })


}

{

    node(8,function(b){

        b.enable(b.DEPTH_TEST);
        b.depthFunc(b.LEQUAL);
        b.clearColor(0.0, 0.0, 0.0, 0.0);
        b.clearDepth(1.0);

    })

    node(9,function(b,j){

        const k=j ? j.l:null;

        //gl.bindFramebuffer(b.FRAMEBUFFER, k);

        if(j){
            b.viewport(0.0, 0.0, j.width, j.height);
        }else{
            b.viewport(0.0, 0.0, b.canvas.width, b.canvas.height);
        }
        b.clear(b.COLOR_BUFFER_BIT | b.DEPTH_BUFFER_BIT);


    })


    node(7,function(Z){

        const c=node(5)
        const d=node(6)

        return Object.assign(Z,{

            m:{
                n:d.o(),
                p:d.o(),
                q:d.o(1.0),
            },
            r(){
                const r=c.o()
                c.s(r, r, this.m.n);
                c.t(r, r, this.m.p[2], [0,0,1]);
                c.t(r, r, this.m.p[1], [0,1,0]);
                c.t(r, r, this.m.p[0], [1,0,0]);
                c.q(r, r, this.m.q);
                return r
            }

        })


    })


}

node(10,function(b,width,height){

    const j={
      width,
      height,
      l: b.createFramebuffer(),
      u: b.createTexture(),
      v: b.createTexture(),
    }

    // l
    b.bindFramebuffer(b.FRAMEBUFFER, j.l);
    j.l.width = width;
    j.l.height = height;

    // w
    b.bindTexture(b.TEXTURE_2D, j.u);
    b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MAG_FILTER, b.LINEAR);
    b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MIN_FILTER, b.LINEAR);
    b.texParameteri(b.TEXTURE_2D, b.TEXTURE_WRAP_S, b.CLAMP_TO_EDGE);
    b.texParameteri(b.TEXTURE_2D, b.TEXTURE_WRAP_T, b.CLAMP_TO_EDGE);
    b.texImage2D(b.TEXTURE_2D, 0, b.RGBA, j.l.width, j.l.height, 0, b.RGBA, b.UNSIGNED_BYTE, null);

    // x
    b.bindTexture(b.TEXTURE_2D, j.v);
    b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MAG_FILTER, b.LINEAR);
    b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MIN_FILTER, b.LINEAR);
    b.texParameteri(b.TEXTURE_2D, b.TEXTURE_WRAP_S, b.CLAMP_TO_EDGE);
    b.texParameteri(b.TEXTURE_2D, b.TEXTURE_WRAP_T, b.CLAMP_TO_EDGE);
    b.texImage2D(b.TEXTURE_2D, 0, b.DEPTH_COMPONENT24, j.l.width, j.l.height, 0, b.DEPTH_COMPONENT, b.UNSIGNED_INT, null);

    // y z
    b.framebufferTexture2D(b.FRAMEBUFFER, b.COLOR_ATTACHMENT0, b.TEXTURE_2D, j.u, 0);
    b.framebufferTexture2D(b.FRAMEBUFFER, b.DEPTH_ATTACHMENT, b.TEXTURE_2D, j.v, 0);

    //this.BB();

    //gl.bindTexture(b.TEXTURE_2D, null);
    //gl.bindRenderbuffer(b.RENDERBUFFER, null);
    b.bindFramebuffer(b.FRAMEBUFFER, null);

    return j

})

node(11,function(BC,BD,BE,BF,BG){
        
        const b=BC.b

        const BH={
            "positions": new Float32Array([
                BF,BD,0.0,
                BF,BE,0.0,
                BG,BE,0.0,
                BG,BD,0.0 
         ]),
         "indices": new Uint16Array([3,2,1,3,1,0]),
         "coords":new Float32Array([
             0,1,
             0,0,
             1,0,
             1,1
         ])
        }

        const BI=new BJ(b,'BK')

        //super(b,BH,BI)
})


/*BM*/

{

    node(12,async function(canvas){

      if(canvas===undefined){
        canvas=document.createElement('canvas')
        canvas.width=window.innerWidth
        canvas.height=window.innerHeight
        document.body.append(canvas)
      }
      const b = canvas.getContext("webgl2")
      




const j=node(10)(b,512,512)















      const BC={
        b,
        BN:[],
      }








    const J=node(4)(b)
    J.m.n[2] = -6

    BC.J=J



      BC.BO=function(b, BP, BQ){

        for(const K of BC.BN){
  
          if(K.BR){
            K.BR(BQ)
          }
  
          K.BO(b, BP)
  
       }
  
      }



    node(8)(b)

    var BS = 0;

    var BR = function(BT) {


       const BQ = (BT-BS)*0.001;




       BS = BT;


        const BP={
            I: J.I(),
            J: J.r(),
        }


       node(9)(b,j)
       this.BO(b, BP, BQ)

       node(9)(b)
       this.BO(b, BP, BQ)
       



       requestAnimationFrame(BR.bind(BC));


    }
    BR.bind(BC)(0);

    return BC

    })



}


{


        node(13,function(BH){
            

            const BV={}

            const BW=["positions", "normals", "texcoords", "indices"]


            if(BH[BW[0]]){
                BV.F=BH[BW[0]]
            }
            if(BH[BW[1]]){
                BV.G=BH[BW[1]]
            }
            if(BH[BW[2]]){
                BV.H=BH[BW[2]]
            }
            if(BH[BW[3]]){
                BV.BX=BH[BW[3]]
            }



            for(const BY of Object.keys(BH)){
                if(! BW.includes(BY)){
                    BV[BY]=BH[BY]
                }
            }

            return BV


        })



}

{

  const BZ = 0.000001;
  const Ba =  1/ BZ;

    function c(){
      return c.o()
    }



    node(3)(c,{

      o() {
        return [1,0,0,0,
          0,1,0,0,
          0,0,1,0,
          0,0,0,1]
      },
      
      Bb(a) {
        let Bc = [];
        Bc[0] = a[0];
        Bc[1] = a[1];
        Bc[2] = a[2];
        Bc[3] = a[3];
        Bc[4] = a[4];
        Bc[5] = a[5];
        Bc[6] = a[6];
        Bc[7] = a[7];
        Bc[8] = a[8];
        Bc[9] = a[9];
        Bc[10] = a[10];
        Bc[11] = a[11];
        Bc[12] = a[12];
        Bc[13] = a[13];
        Bc[14] = a[14];
        Bc[15] = a[15];
        return Bc;
      },

      s(Bc, a, v) {
        let x = v[0],
          y = v[1],
          z = v[2];
        let Bd, Be, Bf, Bg;
        let Bh, Bi, Bj, Bk;
        let Bl, Bm, Bn, Bo;
      
        if (a === Bc) {
          Bc[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
          Bc[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
          Bc[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
          Bc[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
        } else {
          Bd = a[0];
          Be = a[1];
          Bf = a[2];
          Bg = a[3];
          Bh = a[4];
          Bi = a[5];
          Bj = a[6];
          Bk = a[7];
          Bl = a[8];
          Bm = a[9];
          Bn = a[10];
          Bo = a[11];
      
          Bc[0] = Bd;
          Bc[1] = Be;
          Bc[2] = Bf;
          Bc[3] = Bg;
          Bc[4] = Bh;
          Bc[5] = Bi;
          Bc[6] = Bj;
          Bc[7] = Bk;
          Bc[8] = Bl;
          Bc[9] = Bm;
          Bc[10] = Bn;
          Bc[11] = Bo;
      
          Bc[12] = Bd * x + Bh * y + Bl * z + a[12];
          Bc[13] = Be * x + Bi * y + Bm * z + a[13];
          Bc[14] = Bf * x + Bj * y + Bn * z + a[14];
          Bc[15] = Bg * x + Bk * y + Bo * z + a[15];
        }
      
        return Bc;
      },

      q(Bc, a, v) {
        let x = v[0],
          y = v[1],
          z = v[2];
      
        Bc[0] = a[0] * x;
        Bc[1] = a[1] * x;
        Bc[2] = a[2] * x;
        Bc[3] = a[3] * x;
        Bc[4] = a[4] * y;
        Bc[5] = a[5] * y;
        Bc[6] = a[6] * y;
        Bc[7] = a[7] * y;
        Bc[8] = a[8] * z;
        Bc[9] = a[9] * z;
        Bc[10] = a[10] * z;
        Bc[11] = a[11] * z;
        Bc[12] = a[12];
        Bc[13] = a[13];
        Bc[14] = a[14];
        Bc[15] = a[15];
        return Bc;
      },

      t(Bc, a, Bp, Bq) {
        let x = Bq[0],
          y = Bq[1],
          z = Bq[2];
        let Br = Math.hypot(x, y, z);
        let s, c, t;
        let Bd, Be, Bf, Bg;
        let Bh, Bi, Bj, Bk;
        let Bl, Bm, Bn, Bo;
        let Bs, Bt, Bu;
        let Bv, Bw, Bx;
        let By, Bz, CB;
      
        if (Br < BZ) {
          return null;
        }
      
        Br = 1 / Br;
        x *= Br;
        y *= Br;
        z *= Br;
      
        s = Math.sin(Bp);
        c = Math.cos(Bp);
        t = 1 - c;
      
        Bd = a[0];
        Be = a[1];
        Bf = a[2];
        Bg = a[3];
        Bh = a[4];
        Bi = a[5];
        Bj = a[6];
        Bk = a[7];
        Bl = a[8];
        Bm = a[9];
        Bn = a[10];
        Bo = a[11];
      
        // CC CD CE of CD p r
        Bs = x * x * t + c;
        Bt = y * x * t + z * s;
        Bu = z * x * t - y * s;
        Bv = x * y * t - z * s;
        Bw = y * y * t + c;
        Bx = z * y * t + x * s;
        By = x * z * t + y * s;
        Bz = y * z * t - x * s;
        CB = z * z * t + c;
      
        // CF p-specific r CH
        Bc[0] = Bd * Bs + Bh * Bt + Bl * Bu;
        Bc[1] = Be * Bs + Bi * Bt + Bm * Bu;
        Bc[2] = Bf * Bs + Bj * Bt + Bn * Bu;
        Bc[3] = Bg * Bs + Bk * Bt + Bo * Bu;
        Bc[4] = Bd * Bv + Bh * Bw + Bl * Bx;
        Bc[5] = Be * Bv + Bi * Bw + Bm * Bx;
        Bc[6] = Bf * Bv + Bj * Bw + Bn * Bx;
        Bc[7] = Bg * Bv + Bk * Bw + Bo * Bx;
        Bc[8] = Bd * By + Bh * Bz + Bl * CB;
        Bc[9] = Be * By + Bi * Bz + Bm * CB;
        Bc[10] = Bf * By + Bj * Bz + Bn * CB;
        Bc[11] = Bg * By + Bk * Bz + Bo * CB;
      
        if (a !== Bc) {
          // CI CD m CJ CK CL, CM CD CN CO CP
          Bc[12] = a[12];
          Bc[13] = a[13];
          Bc[14] = a[14];
          Bc[15] = a[15];
        }
        return Bc;
      },

      CQ(Bc, a, b) {
        let Bd = a[0],
          Be = a[1],
          Bf = a[2],
          Bg = a[3];
        let Bh = a[4],
          Bi = a[5],
          Bj = a[6],
          Bk = a[7];
        let Bl = a[8],
          Bm = a[9],
          Bn = a[10],
          Bo = a[11];
        let CR = a[12],
          CS = a[13],
          CT = a[14],
          CU = a[15];
      
        // CV CW CD CX CY of CD CZ r
        let Ca = b[0],
          Cb = b[1],
          Cc = b[2],
          Cd = b[3];
        Bc[0] = Ca * Bd + Cb * Bh + Cc * Bl + Cd * CR;
        Bc[1] = Ca * Be + Cb * Bi + Cc * Bm + Cd * CS;
        Bc[2] = Ca * Bf + Cb * Bj + Cc * Bn + Cd * CT;
        Bc[3] = Ca * Bg + Cb * Bk + Cc * Bo + Cd * CU;
      
        Ca = b[4];
        Cb = b[5];
        Cc = b[6];
        Cd = b[7];
        Bc[4] = Ca * Bd + Cb * Bh + Cc * Bl + Cd * CR;
        Bc[5] = Ca * Be + Cb * Bi + Cc * Bm + Cd * CS;
        Bc[6] = Ca * Bf + Cb * Bj + Cc * Bn + Cd * CT;
        Bc[7] = Ca * Bg + Cb * Bk + Cc * Bo + Cd * CU;
      
        Ca = b[8];
        Cb = b[9];
        Cc = b[10];
        Cd = b[11];
        Bc[8] = Ca * Bd + Cb * Bh + Cc * Bl + Cd * CR;
        Bc[9] = Ca * Be + Cb * Bi + Cc * Bm + Cd * CS;
        Bc[10] = Ca * Bf + Cb * Bj + Cc * Bn + Cd * CT;
        Bc[11] = Ca * Bg + Cb * Bk + Cc * Bo + Cd * CU;
      
        Ca = b[12];
        Cb = b[13];
        Cc = b[14];
        Cd = b[15];
        Bc[12] = Ca * Bd + Cb * Bh + Cc * Bl + Cd * CR;
        Bc[13] = Ca * Be + Cb * Bi + Cc * Bm + Cd * CS;
        Bc[14] = Ca * Bf + Cb * Bj + Cc * Bn + Cd * CT;
        Bc[15] = Ca * Bg + Cb * Bk + Cc * Bo + Cd * CU;
        return Bc;
      },


      Ce(Bc, a) {
        let Bd = a[0],
          Be = a[1],
          Bf = a[2],
          Bg = a[3];
        let Bh = a[4],
          Bi = a[5],
          Bj = a[6],
          Bk = a[7];
        let Bl = a[8],
          Bm = a[9],
          Bn = a[10],
          Bo = a[11];
        let CR = a[12],
          CS = a[13],
          CT = a[14],
          CU = a[15];
      
        let Bs = Bd * Bi - Be * Bh;
        let Bt = Bd * Bj - Bf * Bh;
        let Bu = Bd * Bk - Bg * Bh;
        let Cf = Be * Bj - Bf * Bi;
        let Cg = Be * Bk - Bg * Bi;
        let Ch = Bf * Bk - Bg * Bj;
        let Ci = Bl * CS - Bm * CR;
        let Cj = Bl * CT - Bn * CR;
        let Ck = Bl * CU - Bo * CR;
        let Cl = Bm * CT - Bn * CS;
        let Bv = Bm * CU - Bo * CS;
        let Bw = Bn * CU - Bo * CT;
      
        // Cm CD Cn
        let Co =
          Bs * Bw - Bt * Bv + Bu * Cl + Cf * Ck - Cg * Cj + Ch * Ci;
      
        if (!Co) {
          return null;
        }
        Co = 1.0 / Co;
      
        Bc[0] = (Bi * Bw - Bj * Bv + Bk * Cl) * Co;
        Bc[1] = (Bf * Bv - Be * Bw - Bg * Cl) * Co;
        Bc[2] = (CS * Ch - CT * Cg + CU * Cf) * Co;
        Bc[3] = (Bn * Cg - Bm * Ch - Bo * Cf) * Co;
        Bc[4] = (Bj * Ck - Bh * Bw - Bk * Cj) * Co;
        Bc[5] = (Bd * Bw - Bf * Ck + Bg * Cj) * Co;
        Bc[6] = (CT * Bu - CR * Ch - CU * Bt) * Co;
        Bc[7] = (Bl * Ch - Bn * Bu + Bo * Bt) * Co;
        Bc[8] = (Bh * Bv - Bi * Ck + Bk * Ci) * Co;
        Bc[9] = (Be * Ck - Bd * Bv - Bg * Ci) * Co;
        Bc[10] = (CR * Cg - CS * Bu + CU * Bs) * Co;
        Bc[11] = (Bm * Bu - Bl * Cg - Bo * Bs) * Co;
        Bc[12] = (Bi * Cj - Bh * Cl - Bj * Ci) * Co;
        Bc[13] = (Bd * Cl - Be * Cj + Bf * Ci) * Co;
        Bc[14] = (CS * Bt - CR * Cf - CT * Bs) * Co;
        Bc[15] = (Bl * Cf - Bm * Bt + Bn * Bs) * Co;
      
        return Bc;
      },
      
      //perspectiveNO
      i(Bc, Cq, e, g, h) {
        const Cr = 1.0 / Math.tan(Cq / 2);
        Bc[0] = Cr / e;
        Bc[1] = 0;
        Bc[2] = 0;
        Bc[3] = 0;
        Bc[4] = 0;
        Bc[5] = Cr;
        Bc[6] = 0;
        Bc[7] = 0;
        Bc[8] = 0;
        Bc[9] = 0;
        Bc[11] = -1;
        Bc[12] = 0;
        Bc[13] = 0;
        Bc[15] = 0;
        if (h != null && h !== Ba) {
          const Cs = 1 / (g - h);
          Bc[10] = (h + g) * Cs;
          Bc[14] = 2 * h * g * Cs;
        } else {
          Bc[10] = -1;
          Bc[14] = -2 * g;
        }
        return Bc;
      }


    
    })
    
    node(5,c)
    

}



{

    node(14,function(b,Y,Ct){

      if(Ct===undefined){
        Ct = b.ARRAY_BUFFER
      }
      const j = b.createBuffer();
      b.bindBuffer(Ct, j);
      b.bufferData(Ct, Y, b.STATIC_DRAW);
      return j;

    })
    


    node(15,function(b,Cu,j,Cv,Cw,Ct){
      
      if(Ct===undefined){
        Ct=b.ARRAY_BUFFER
      }

      b.bindBuffer(Ct, j);

       const k = b.getAttribLocation(Cu, Cv);

       if(k>-1){
          b.vertexAttribPointer(k, Cw, b.FLOAT, false,0,0) ;
          b.enableVertexAttribArray(k);
       }

    })

    node(16,function(b,BH){

      const Cx=node(1)
      const Cy=node(2)

      const z={}

      for(const BY of Object.keys(BH)){

        if(BY==='BX'){

          z[BY] = node(14)(b, Cy(BH[BY]), b.ELEMENT_ARRAY_BUFFER)

        }else{
          z[BY] = node(14)(b, Cx(BH[BY]))
        }

      }
      
      return z

    })


    node(17,function(b,Cu,z){

      const Cz = b.createVertexArray();
      b.bindVertexArray(Cz);

      for(const BY of Object.keys(z)){

        let DB= (BY==='BX')?1:3
        if(BY==='H'){
          DB=2
        }
        let Ct= (BY==='BX')? b.ELEMENT_ARRAY_BUFFER: b.ARRAY_BUFFER

          node(15)(b,Cu, z[BY], BY,DB,Ct)
            
      }

      b.bindVertexArray(null);

      return Cz

    })



    node(18,function(b,BH,Cu){


      let z
      const DC={
        BH,
        z: z=node(16)(b, BH),
        Cu,
        Cz: node(17)(b,Cu,z),
        DD:b.TRIANGLES,

        BO(b,BP){

            b.useProgram(this.Cu);


           
            b.bindVertexArray(this.Cz);

            
            const DE=node(19)(b,this.Cu)

            DE.set(BP)
            DE.set(this.BP??{})
            DE.set({
              K:this.r(),
            })
          
          if(this.BH.BX){
            b.bindBuffer(b.ELEMENT_ARRAY_BUFFER, this.z.BX);

            b.drawElements(this.DD, this.BH.BX.length, b.UNSIGNED_SHORT, 0);
          }else{
            let DF=this.BH.F.length/3
            //if(this.DD===b.POINTS){
            //  DF=this.BH.F.length/3
            //}
            b.drawArrays(this.DD, 0, DF);
          }
        }
      }

      node(7)(DC)

      return DC


    })


}



{

    node(20,async function(b,Cv){

      const T=node(0)

        const DG = await T("/wp-includes/shaders"+"/"+Cv+".vert")
        const DK = await T("/wp-includes/shaders"+"/"+Cv+".frag")

      return node(21)(b,DG,DK)

    })

    node(22,function(b,DM,DN){

      const BI=b.createShader(DN);
      b.shaderSource(BI, DM);
      b.compileShader(BI);

      if (! b.getShaderParameter(BI, b.COMPILE_STATUS)) {
        console.log('DM',DM)
        console.log(b.getShaderInfoLog(BI));
      }

      return BI

    })


    node(21,async function(b,DG,DK){

      const DO = await node(22)(b,DG,b.VERTEX_SHADER)
      const DP = await node(22)(b,DK,b.FRAGMENT_SHADER)

      const Cu = b.createProgram();
      b.attachShader(Cu, DO);
      b.attachShader(Cu, DP);
      b.linkProgram(Cu);

      if (! b.getProgramParameter(Cu, b.LINK_STATUS)) {
        console.log(b.getProgramInfoLog(Cu));
      }

      return Cu

    })

}


{





    node(23,function DQ(b, DR) {
        const u = b.createTexture();
        b.bindTexture(b.TEXTURE_2D, u);
     
        // DS DT DU DV DW DX DY CD DZ
        // Da Db Dc a Dd De Da Df Dg.
        // Dh then Di a Dj Dk Dl CD u Dm Dn Do
        // Dp Dq Dr. Ds CD Dt Du Dv Dw
        // Dn'Dx Dy CD u Dz CD EB of CD Dt.
        const EC = 0;
        const ED = b.RGBA;
        const width = 1;
        const height = 1;
        const EE = 0;
        const EF = b.RGBA;
        const EG = b.UNSIGNED_BYTE;
        const Dk = new Uint8Array([0, 0, 255, 255]);  // EH EI
        b.texImage2D(b.TEXTURE_2D, EC, ED,
                    width, height, EE, EF, EG,
                    Dk);
     
        const Dt = new Image();
        Dt.onload = function() {
        b.bindTexture(b.TEXTURE_2D, u);
        b.texImage2D(b.TEXTURE_2D, EC, ED,
                       EF, EG, Dt);
     
        // EJ Du EK EL for EM of 2 DT
        // EN EO EM of 2 DT Dm EP if CD Dt EQ a
        // EM of 2 Dl ER ES.
        if (ET(Dt.width) && ET(Dt.height)) {
           // EU, Dq's a EM of 2. EV EW.
           b.generateMipmap(b.TEXTURE_2D);
        } else {
           // EX, Dq's EY a EM of 2. EZ of EW CJ set
           // Ea DV Eb DV Ec
           b.texParameteri(b.TEXTURE_2D, b.TEXTURE_WRAP_S, b.CLAMP_TO_EDGE);
           b.texParameteri(b.TEXTURE_2D, b.TEXTURE_WRAP_T, b.CLAMP_TO_EDGE);
           b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MIN_FILTER, b.LINEAR);
        }
        };
        Dt.src = DR;
     
        return u;
     })
     
     function ET(value) {
        return (value & (value - 1)) == 0;
     }




}

{


    node(19,function Ed(b, Ee){
       
        let Ef=0
        b.activeTexture(b.TEXTURE0)
        b.bindTexture(b.TEXTURE_2D,null)
      
        return {
            set(BP){
                
                for(const BY of Object.keys(BP)){

                    const k = b.getUniformLocation(Ee,BY)
                    const Eg=BP[BY]
                
                    if((! k)||(Eg===undefined)){
                        return
                    }
                    
                    
                    
                    if((Eg!==undefined)&&(Eg["constructor"]["name"]==="WebGLTexture")){
                        b.uniform1i(k,Ef)
                        b.activeTexture(b.TEXTURE0+Ef)
                        b.bindTexture(b.TEXTURE_2D,Eg)
                        Ef++
                    }else{
                        
                        switch(Eg.length) {
                            case 16:
                                b.uniformMatrix4fv(k,null,Eg)
                                break;
                            case 4:
                                b.uniform4fv(k,Eg)
                                break;
                            case 3:
                                b.uniform3fv(k,Eg)
                                break;
                            case 2:
                                b.uniform2fv(k,Eg)
                                break;
                            Eh:
                                b.uniform1f(k,Eg)
                          }
                        

                    }
            
                }
                
            }
        }
    })


}

{


    function d(){
        return d.o()
      }

    node(3)(d,{

        o(x,y,z) {
          if(x===undefined){
            x=0.0
          }
          if(y===undefined){
            y=x
          }
          if(z===undefined){
            z=y
          }
          return [x,y,z]
        },

        Ei(a){
          let x = a[0];
          let y = a[1];
          let z = a[2];
          return Math.hypot(x, y, z);
        },

        add(Bc, a, b) {
          Bc[0] = a[0] + b[0];
          Bc[1] = a[1] + b[1];
          Bc[2] = a[2] + b[2];
          return Bc;
        },
        
        Ej(Bc, a, b) {
          Bc[0] = a[0] - b[0];
          Bc[1] = a[1] - b[1];
          Bc[2] = a[2] - b[2];
          return Bc;
        }

    })


    node(6,d)


}

{



    node(24,async function(){



        const BC=await node(12)()
        const b=BC.b



        const Ek=5
        function El(){
            return (Ek / 2)-Math.random()*Ek
        }

        const Em=0.2
        function q(){
            return (Em / 3)+Math.random()*Em
        }

        const En=0.072
        function Eo(){
            return (En / 10)+Math.random()*En*0.13
        }




        const Cu=await node(20)(b,"default")

        let BH=await node(0)("/wp-includes/models/box.json","json")
        BH=node(13)(BH)

        const B=node(23)(b,"/wp-includes/images/box.webp")

        const Es=[]

        for(let i=0;i<20;i++){
            const DC=node(18)(b, BH, Cu)
            DC.m.n=[El(), El(), El()]
            const Em=q()
            DC.m.q=[Em,Em,Em]
            DC.m.Eo=[Eo(),Eo(),Eo()]

            DC.BP={
                B,
            }

            //mesh.DD=b.LINE_STRIP;

            Es.push(DC)
        }



            for(const DC of Es){

                DC.BR=function(BQ){

                    DC.m.p=DC.m.p.map((n,i)=>n+DC.m.Eo[i])

                }
            }
            //const p=[BQ*0.3, BQ*0.12, BQ*0.45]
            //this.m.p=this.m.p.map((n,i)=>n+p[i])



        BC.BN.push(...Es)
















        //node(25)('./models/stickman/scene.Ev')





    })



}


{



    node(26,async function(){



        const BC=await node(12)()
        const b=BC.b



        

        const Ew=[]
        for(let i=0;i<20;i++){
            Ew.push({point:[Math.random(),Math.random(),0]})
        }


        //const Ex=(Ew.length/3)-2

        console.log('Ew',Ew)

        /*let Br=1000000;
        let Ey
        for(const Ez of Ew){
            const FB=d.Ei(Ez.Ez);
            Ez.length=FB;
            if(FB<len){
                Br=FB;
                Ey=Ez
            }
        }*/
        const FC=[];

        function FD(FE){
            let FF=[];

            for(const Ez of Ew){
                const FG=d.Ej([],Ez.Ez,FE.Ez);
                Ez.Br=d.Ei(FG);
            }
            let Br=100000
            let FH
            let FI
            let FJ
            for(const Ez of Ew){
                if(Ez!==FE){
                    if(Br>point.Br){
                        Br=Ez.Br;
                        FJ=FI;
                        FI=FH;
                        FH=Ez;
                    }
                }
            }

            if(FE&&point2&&point3){
                FF.push([FE,FH,FI])
            }
            if(FH&&point4&&point3){
                FF.push([FH,FJ,FI])
            }


            return FF;
        }
        
        for(const Ez of Ew){
            const FK=FD(Ez)
            if(FK.length){
                FC.push(...FK);
            }
        }
        //var FL = FM.FN(F);
        //var BV = FM(FL.FO, FL.FP, FL.ES);
        const F=[]
        for(const FQ of FC){
            F.push(...FQ)
        }
        //const BX = FM(F,null,2);//earcut(F,[4]);
        //console.log('BX',BX)
        //const F=[]
        //for(const p of FR){
        //    F.push(...FC[p])
        //}
        //const BX=FR

        const Cu=await node(20)(b,"default")
    
        {

            //const F=[]
            //points.map(El=>positions.push(...El.Ez))

            let BH={positions}
            
            BH=node(13)(BH)

            //const B=node(23)(b,"/wp-includes/images/box.webp")

            

            const DC=node(18)(b, BH, Cu)

            DC.DD=b.POINTS;

            BC.BN.push(DC)
        }



        {
            const FS=[]
            FC.map(FT=>triangle.map(El=>tpositions.push(...El.Ez)))

            let FU={positions:FS}
            
            FU=node(13)(FU)

            //const B=node(23)(b,"/wp-includes/images/box.webp")

            

            const FV=node(18)(b, FU, Cu)

            //tmesh.DD=b.LINES;

            BC.BN.push(FV)
        }
















        //node(25)('./models/stickman/scene.Ev')





    })



}


{



    node(27,async function(){



        const BC=await node(12)()
        const b=BC.b



        
        //engine.J.m.n = d.o()


        const Cu=await node(20)(b,"render2d")

        let BH=await node(0)("/wp-includes/models/quad.json","json")
        
        BH=node(13)(BH)

        //const B=node(23)(b,"/wp-includes/images/box.webp")

        

        const DC=node(18)(b, BH, Cu)

        DC.m.q=[0.8,0.8,0.8]


        BC.BN.push(DC)
















        //node(25)('./models/stickman/scene.Ev')





    })



}


{

    node(28,function(){


        //node(27)()

        //node(26)()

        node(24)()


    })

    /*window.addEventListener('FX', () => {
        node(28)()
    })*/

    node(28)()

}



